/*
 * Copyright Truesense AI Solutions Pvt Ltd, All Rights Reserved.
 */

/* ====== LOCAL VARIABLES ====== */

const M_PI = Math.PI;

/* S(x) for small x */
const sn = [
	-2.99181919401019853726e3,
	7.08840045257738576863e5,
	-6.29741486205862506537e7,
	2.54890880573376359104e9,
	-4.42979518059697779103e10,
	3.18016297876567817986e11,
];
const sd = [
	/* 1.00000000000000000000E0,*/
	2.81376268889994315696e2,
	4.55847810806532581675e4,
	5.1734388877009640073e6,
	4.19320245898111231129e8,
	2.2441179564534092094e10,
	6.07366389490084639049e11,
];

/* C(x) for small x */
const cn = [
	-4.98843114573573548651e-8,
	9.50428062829859605134e-6,
	-6.45191435683965050962e-4,
	1.88843319396703850064e-2,
	-2.05525900955013891793e-1,
	9.99999999999999998822e-1,
];
const cd = [
	3.99982968972495980367e-12,
	9.15439215774657478799e-10,
	1.25001862479598821474e-7,
	1.22262789024179030997e-5,
	8.68029542941784300606e-4,
	4.12142090722199792936e-2,
	1.00000000000000000118,
];

/* Auxiliary function f(x) */
const fn = [
	4.21543555043677546506e-1,
	1.43407919780758885261e-1,
	1.15220955073585758835e-2,
	3.450179397825740279e-4,
	4.63613749287867322088e-6,
	3.05568983790257605827e-8,
	1.02304514164907233465e-10,
	1.72010743268161828879e-13,
	1.34283276233062758925e-16,
	3.76329711269987889006e-20,
];
const fd = [
	/*  1.00000000000000000000E0,*/
	7.51586398353378947175e-1,
	1.16888925859191382142e-1,
	6.44051526508858611005e-3,
	1.55934409164153020873e-4,
	1.8462756734893054587e-6,
	1.12699224763999035261e-8,
	3.60140029589371370404e-11,
	5.8875453362157841001e-14,
	4.52001434074129701496e-17,
	1.25443237090011264384e-20,
];

/* Auxiliary function g(x) */
const gn = [
	5.04442073643383265887e-1,
	1.97102833525523411709e-1,
	1.87648584092575249293e-2,
	6.84079380915393090172e-4,
	1.15138826111884280931e-5,
	9.82852443688422223854e-8,
	4.45344415861750144738e-10,
	1.08268041139020870318e-12,
	1.37555460633261799868e-15,
	8.36354435630677421531e-19,
	1.86958710162783235106e-22,
];
const gd = [
	/*  1.00000000000000000000E0,*/
	1.47495759925128324529,
	3.37748989120019970451e-1,
	2.53603741420338795122e-2,
	8.14679107184306179049e-4,
	1.27545075667729118702e-5,
	1.04314589657571990585e-7,
	4.60680728146520428211e-10,
	1.10273215066240270757e-12,
	1.38796531259578871258e-15,
	8.39158816283118707363e-19,
	1.86958710162783236342e-22,
];

function polevl ( x, coef, n ) {

	let ans;
	let p = 0;
	let i;

	ans = coef[ p++ ];
	i = n;

	do {
		ans = ans * x + coef[ p++ ];
	} while ( --i );

	return ans;
}

function p1evl ( x, coef, n ) {

	let ans;
	let p = 0;
	let i;

	ans = x + coef[ p++ ];
	i = n - 1;

	do {
		ans = ans * x + coef[ p++ ];
	} while ( --i );

	return ans;
}

function fresnel ( xxa, ssa, cca ) {
	let f, g, cc, ss, c, s, t, u;
	let x, x2;

	x = Math.abs( xxa );
	x2 = x * x;

	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		ss = ( x * x2 * polevl( t, sn, 5 ) ) / p1evl( t, sd, 6 );
		cc = ( x * polevl( t, cn, 5 ) ) / polevl( t, cd, 6 );
	} else if ( x > 36974.0 ) {
		cc = 0.5;
		ss = 0.5;
	} else {
		x2 = x * x;
		t = M_PI * x2;
		u = 1.0 / ( t * t );
		t = 1.0 / t;
		f = 1.0 - ( u * polevl( u, fn, 9 ) ) / p1evl( u, fd, 10 );
		g = ( t * polevl( u, gn, 10 ) ) / p1evl( u, gd, 11 );

		t = M_PI * 0.5 * x2;
		c = Math.cos( t );
		s = Math.sin( t );
		t = M_PI * x;
		cc = 0.5 + ( f * s - g * c ) / t;
		ss = 0.5 - ( f * c + g * s ) / t;
	}

	if ( xxa < 0.0 ) {
		cc = -cc;
		ss = -ss;
	}

	cca = cc;
	ssa = ss;

	return { y: ssa, x: cca };
}

function odrSpiral ( s, cDot, x, y, t ) {

	let a;

	a = 1.0 / Math.sqrt( Math.abs( cDot ) );
	a *= Math.sqrt( M_PI );

	let f = fresnel( s / a, y, x );

	x = f.x;
	y = f.y;

	x *= a;
	y *= a;

	if ( cDot < 0.0 ) y *= -1.0;

	t = s * s * cDot * 0.5;

	return { x, y, t };
}

export class SpiralUtils {

	public static fresnel ( xxa, ssa, cca ) {

		return fresnel( xxa, ssa, cca );

	}

	static odrSpiral ( s, cDot, x, y, t ) {

		return odrSpiral( s, cDot, x, y, t );

	}

}

